{"version":3,"sources":["images/logo.png","components/Header.js","components/PersonajeCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Fragment","src","logo","className","alt","PersonajeCard","props","character","style","backgroundImage","image","name","species","gender","status","App","state","loading","error","data","info","results","nextPage","fetchCharacters","a","setState","fetch","response","json","console","log","concat","this","map","key","id","next","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,kC,8QCc5BC,MAXf,WACI,OACE,kBAAC,IAAMC,SAAP,KACM,gCACA,yBAAKC,IAAKC,IAAMC,UAAU,YAAYC,IAAI,YCqBvCC,MA1Bf,SAAwBC,GAAQ,IACpBC,EAAcD,EAAdC,UAER,OACE,yBAAKJ,UAAU,8CACb,yBACQA,UAAU,gBACVK,MAAO,CAAEC,gBAAgB,OAAD,OAASF,EAAUG,MAAnB,OAE5B,yBAAKP,UAAU,+CACdI,EAAUI,KACX,+BAGJ,yBAAKR,UAAU,uBACX,wBAAIA,UAAU,cAAd,yBACA,0BAAMA,UAAU,cAAhB,aAFJ,IAEkD,0BAAOA,UAAU,cAAcI,EAAUK,SACvF,6BACA,0BAAMT,UAAU,cAAhB,YAJJ,IAIiD,0BAAMA,UAAU,cAAcI,EAAUM,QACrF,6BACA,0BAAMV,UAAU,cAAhB,YANJ,IAMiD,0BAAMA,UAAU,cAAcI,EAAUO,WCyDlFC,E,2MAvEbC,MAAQ,CACNC,SAAS,EACTC,MAAO,KACPC,KAAM,CACJC,KAAM,GACNC,QAAS,IAEXC,SAAU,G,EAOZC,gB,qBAAkB,8BAAAC,EAAA,4DAChB,EAAKC,SAAS,CACZR,SAAS,EACTC,MAAO,OAHO,kBAOSQ,MAAM,mDAAD,OACyB,EAAKV,MAAMM,WARlD,cAORK,EAPQ,gBAWKA,EAASC,OAXd,OAWRT,EAXQ,OAYdU,QAAQC,IAAIX,GAEZ,EAAKM,SAAS,CACZR,SAAS,EACTE,KAAM,CACJC,KAAMD,EAAKC,KACXC,QAAS,GAAGU,OAAO,EAAKf,MAAMG,KAAKE,QAASF,EAAKE,UAEnDC,SAAU,EAAKN,MAAMM,SAAW,IApBpB,kDAuBd,EAAKG,SAAS,CAACR,SAAS,EAAOC,MAAM,EAAD,KAvBtB,wD,mFAHhBc,KAAKT,oB,+BA8BG,IAAD,OAEP,OAAIS,KAAKhB,MAAME,MACN,QAIP,yBAAKf,UAAU,aACb,yBAAKA,UAAU,uBACX,kBAAC,EAAD,MAEA,wBAAIA,UAAU,OACb6B,KAAKhB,MAAMG,KAAKE,QAAQY,IAAI,SAAA1B,GAAS,OACpC,wBAAIJ,UAAU,iBAAiB+B,IAAK3B,EAAU4B,IAC5C,kBAAC,EAAD,CAAe5B,UAAWA,QAK7ByB,KAAKhB,MAAMC,SAAW,uBAAGd,UAAU,eAAb,eACrB6B,KAAKhB,MAAMC,SAAWe,KAAKhB,MAAMG,KAAKC,KAAKgB,MAC3C,4BAAQjC,UAAU,kBAAkBkC,QAAS,kBAAM,EAAKd,oBAAxD,iBAEF,mC,GAlEMe,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8826f591.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.de82c64b.png\";","import React from 'react';\r\nimport logo from '../images/logo.png';\r\n\r\nfunction Header () {\r\n    return(\r\n      <React.Fragment>\r\n            <header>\r\n            <img src={logo} className=\"App-logo1\" alt=\"logo\" />\r\n\r\n            </header>\r\n      </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction PersonajeCard (props) {\r\n    const { character } = props;\r\n\r\n    return (\r\n      <div className=\"char-card-container animated fadeInDownBig\">\r\n        <div\r\n                className=\"CharacterCard\"\r\n                style={{ backgroundImage: `url(${character.image})` }}\r\n            >\r\n            <div className=\"CharacterCard__name-container text-truncate\">\r\n            {character.name}\r\n            <br/>\r\n            </div>\r\n        </div>\r\n        <div className=\"more-info-container\">\r\n            <h5 className=\"char-title\">Más Información</h5>\r\n            <span className=\"char-title\">Especie: </span> <span  className=\"white-text\">{character.species}</span>\r\n            <br/>\r\n            <span className=\"char-title\">Genero: </span> <span className=\"white-text\">{character.gender}</span>\r\n            <br/>\r\n            <span className=\"char-title\">Estado: </span> <span className=\"white-text\">{character.status}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default PersonajeCard;","import React from 'react';\nimport './styles/animated.css';\nimport './App.css';\nimport Header from './components/Header';\nimport PersonajeCard from './components/PersonajeCard';\n\nclass App extends React.Component {\n\n  state = {\n    loading: true,\n    error: null,\n    data: {\n      info: {},\n      results: []\n    },\n    nextPage: 1\n  };\n\n  componentDidMount() {\n    this.fetchCharacters();\n  }\n\n  fetchCharacters = async () => {\n    this.setState({\n      loading: true,\n      error: null\n    });\n\n    try {\n      const response = await fetch(\n        `https://rickandmortyapi.com/api/character/?page=${this.state.nextPage}`\n      );\n\n      const data = await response.json();\n      console.log(data); // borrar\n      \n      this.setState({\n        loading: false,\n        data: {\n          info: data.info,\n          results: [].concat(this.state.data.results, data.results)\n        },\n        nextPage: this.state.nextPage + 1\n      });\n    } catch (error) {\n      this.setState({loading: false, error: error});\n    }\n  }\n\n  render() {\n\n    if (this.state.error) {\n      return 'Error';\n    }\n\n    return (\n      <div className=\"container\">\n        <div className=\"App animated fadeIn\">\n            <Header />\n\n            <ul className=\"row\">\n            {this.state.data.results.map(character => (\n              <li className=\"col-6 col-md-3\" key={character.id}>\n                <PersonajeCard character={character} />\n              </li>\n            ))}\n            </ul>\n\n            {this.state.loading && <p className=\"text-center\">Loading...</p>}\n            {!this.state.loading && this.state.data.info.next && (\n              <button className=\"btn btn-primary\" onClick={() => this.fetchCharacters()}>Cargar Más</button>\n            )}\n            <br/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}